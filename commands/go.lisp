(defun move-me-to (place)
 (let ((current-place (third (gethash "me" *objects*))))
	(setf (fourth (gethash current-place *objects*)) 
	 (remove "me" (fourth (gethash current-place *objects*)))))
 (setf (third (gethash "me" *objects*)) place)
 (let ((current-place (third (gethash "me" *objects*))))
	(setf (fourth (gethash current-place *objects*))
	 (concatenate 'list (fourth (gethash current-place *objects*)) (list "me"))))
 (format t "You go to the ~a.~%" place))

(defun choose-adjacent ()
 (let ((here (third (gethash "me" *objects*))) (place-index 1))
  (loop for place in (fifth (gethash here *objects*))
   do (progn 
	   (format *query-io* "~a. ~a~%" place-index place) 
	   (incf place-index)))
  (elt (fifth (gethash here *objects*)) (1- (get-choice "where (#)? ")))))

(defun adjacent-to-me (place)
 (let ((here (third (gethash "me" *objects*))))
  (loop for loc in (fifth (gethash here *objects*))
   do (when (equalp loc place)
	   (return-from adjacent-to-me T)))
  nil))

(defun do-go (sentence)
 (let ((target (space-concat (remove-common (rest sentence)))))
	(if (equal target "")
	 (move-me-to (choose-adjacent))
	 (if (adjacent-to-me target)
		(move-me-to target)
		(format t "You can't get to the ~a from here." target)))))

(add-command "go" #'do-go)
